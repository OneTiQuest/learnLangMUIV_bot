import json
import bot.markups as markups
from bot.exersise_handlers import ExersiseFactory
from bot.scripts import calc_result
import bot.state as state
from bot.check_answers import (
    lang_answer,
    course_answer,
    role_answer,
    exersise_types_answer,
)
from bot.api import HttpClient


def _1_step_handler(bot, chat_id: int, user_id: int, text: str):
    answer = lang_answer(text, chat_id)
    if answer:
        http_client = HttpClient(chat_id)
        http_client.post(f"/users/{user_id}/langs", {"lang_id": answer[0]})

        bot.send_message(chat_id, f"–¢–µ–∫—É—â–∏–π —è–∑—ã–∫ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {text}")

        state.set_state(chat_id, "2_step")
        bot.send_message(
            chat_id,
            "–°–º–µ–Ω–∞ –∫—É—Ä—Å–∞ –æ–±—É—á–µ–Ω–∏—è:",
            reply_markup=markups.get_course_markup(chat_id),
        )

    else:
        bot.send_message(
            chat_id,
            "–°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –æ–±—É—á–µ–Ω–∏—è:",
            reply_markup=markups.get_lang_markup(chat_id, None, False),
        )


def _2_step_handler(bot, chat_id: int, user_id: int, text: str):
    answer = course_answer(text, chat_id)
    if answer:
        http_client = HttpClient(chat_id)
        http_client.post(f"/users/{user_id}/courses", {"course_id": answer[0]})

        bot.send_message(chat_id, f"–¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å: {text}")

        state.set_state(chat_id, "main")
        bot.send_message(
            chat_id, "–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=markups.get_main_markup()
        )

    else:
        bot.send_message(
            chat_id,
            "–°–º–µ–Ω–∞ –∫—É—Ä—Å–∞ –æ–±—É—á–µ–Ω–∏—è:",
            reply_markup=markups.get_course_markup(chat_id, False),
        )


def _2_step_teacher_handler(bot, chat_id: int, user_id: int, text: str):
    answer = course_answer(text, chat_id)
    if answer:
        http_client = HttpClient(chat_id)
        http_client.post(f"/users/{user_id}/courses", {"course_id": answer[0]})
        bot.send_message(chat_id, f"–¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å: {text}")

        state.set_state(chat_id, "main")
        bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é:",
            reply_markup=markups.get_teacher_main_markup(),
        )

    else:
        bot.send_message(
            chat_id,
            "–°–º–µ–Ω–∞ –∫—É—Ä—Å–∞ –æ–±—É—á–µ–Ω–∏—è:",
            reply_markup=markups.get_course_markup(chat_id),
        )


def main_menu_handler(bot, chat_id: int, user_id: int, text: str):
    if text == "‚ÑπÔ∏è –ú–æ–¥—É–ª–∏":
        mrkp = markups.get_modules_markup(chat_id, user_id)

        isEmpty = not mrkp.to_dict().get("inline_keyboard")

        text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –º–æ–¥—É–ª—å:"

        if isEmpty:
            text = (
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è –≤–∞—à–µ–≥–æ —è–∑—ã–∫–∞ –∏ –∫—É—Ä—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ :("
            )

        bot.send_message(chat_id, text, reply_markup=mrkp)

    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        state.set_state(chat_id, "settings")
        bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é:",
            reply_markup=markups.get_settings_markup(),
        )

    elif text == "‚≠êÔ∏è –ú–æ–∏ –æ—Ü–µ–Ω–∫–∏":
        my_grades(bot, chat_id, user_id)

    else:
        bot.send_message(
            chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é:", reply_markup=markups.get_main_markup()
        )


def lang_menu_handler(bot, chat_id: int, user_id: int, text: str):
    answer = lang_answer(text, chat_id)
    if answer:
        http_client = HttpClient(chat_id)
        res = http_client.put(f"/users/{user_id}/langs", {"lang_id": answer[0]})
        import json

        bot.send_message(chat_id, json.dumps(res))
        bot.send_message(chat_id, f"–¢–µ–∫—É—â–∏–π —è–∑—ã–∫ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {text}")

        state.set_state(chat_id, "settings")
        bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é:",
            reply_markup=markups.get_settings_markup(),
        )

    else:
        bot.send_message(
            chat_id,
            "–°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –æ–±—É—á–µ–Ω–∏—è:",
            reply_markup=markups.get_lang_markup(chat_id),
        )


def course_menu_handler(bot, chat_id: int, user_id: int, text: str):
    answer = course_answer(text, chat_id)
    if answer:
        http_client = HttpClient(chat_id)
        http_client.put(f"/users/{user_id}/courses", {"course_id": answer[0]})

        bot.send_message(chat_id, f"–¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å: {text}")

        state.set_state(chat_id, "settings")
        bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é:",
            reply_markup=markups.get_settings_markup(),
        )

    else:
        bot.send_message(
            chat_id,
            "–°–º–µ–Ω–∞ –∫—É—Ä—Å–∞ –æ–±—É—á–µ–Ω–∏—è:",
            reply_markup=markups.get_course_markup(chat_id),
        )


def settings_menu_handler(bot, chat_id: int, user_id: int, text: str):
    if text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫":
        state.set_state(chat_id, "lang_menu")
        bot.send_message(
            chat_id,
            "–°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –æ–±—É—á–µ–Ω–∏—è:",
            reply_markup=markups.get_lang_markup(chat_id),
        )

    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –æ–±—É—á–µ–Ω–∏—è":
        state.set_state(chat_id, "course_menu")
        bot.send_message(
            chat_id,
            "–°–º–µ–Ω–∞ –∫—É—Ä—Å–∞ –æ–±—É—á–µ–Ω–∏—è:",
            reply_markup=markups.get_course_markup(chat_id),
        )

    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å (—Ç–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è)":
        state.set_state(chat_id, "roles")
        bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ä–æ–ª—å:",
            reply_markup=markups.get_roles_markup(chat_id),
        )

    else:
        bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é:",
            reply_markup=markups.get_settings_markup(),
        )


def roles_menu_handler(bot, chat_id: int, user_id: int, text: str):
    answer = role_answer(text, chat_id)
    if answer:
        http_client = HttpClient(chat_id)
        http_client.post(f"/users/{user_id}/roles", {"role_id": answer[0]})
        http_client.refresh_token()

        state.set_state(chat_id, None)
        bot.send_message(
            chat_id,
            "–í–∞—à–∞ —Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å",
            reply_markup=markups.get_next_markup(),
        )

    else:
        bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ä–æ–ª—å:",
            reply_markup=markups.get_roles_markup(chat_id),
        )


def module_menu_handler(bot, chat_id: int, user_id: int, module_id: int):
    mrkp = markups.get_themes_markup(chat_id, module_id)

    isEmpty = not mrkp.to_dict().get("inline_keyboard")

    text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Ç–µ–º—É:"
    if isEmpty:
        text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ üòû"

    bot.send_message(chat_id, text, reply_markup=mrkp)


def theme_menu_handler(bot, chat_id: int, user_id: int, text: str, theme_id: int):
    user_state = str(state.get_state(chat_id)).split("/")
    current_theme_id = user_state[1]
    current_exersise_id = user_state[2]
    http_client = HttpClient(chat_id)

    if text != "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚û°Ô∏è":
        http_client.post(
            f"/users/{user_id}/exercises/{current_exersise_id}/answers",
            {"answer": text},
        )

    ex = http_client.get(
        f"/themes/{current_theme_id}/exercises/{current_exersise_id}/next"
    )

    if not ex:
        calc_result(bot, user_id, chat_id, theme_id)
        state.set_state(chat_id, "main")
        return

    ExersiseFactory.create_exersise(ex, bot, chat_id).send()

    next_exersise_id = ex[0]
    state.set_state(chat_id, f"theme/{current_theme_id}/{next_exersise_id}")


def teach_main_menu_handler(bot, chat_id: int, user_id: int, text: str):
    if text == "‚ÑπÔ∏è –ú–æ–¥—É–ª–∏":
        mrkp = markups.get_modules_markup(chat_id, user_id)

        isEmpty = not mrkp.to_dict().get("inline_keyboard")

        text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –º–æ–¥—É–ª—å:"

        if isEmpty:
            text = (
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è –≤–∞—à–µ–≥–æ —è–∑—ã–∫–∞ –∏ –∫—É—Ä—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòû"
            )

        bot.send_message(chat_id, text, reply_markup=mrkp)

    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ü–µ–Ω–æ–∫":
        text_stat = "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ü–µ–Ω–æ–∫ –ø–æ –≤–∞—à–∏–º –º–æ–¥—É–ª—è–º üìä:</b>\n\n"

        http_client = HttpClient(chat_id)
        stat = http_client.get(f"/users/{user_id}/grades")

        if not stat:
            bot.send_message(
                chat_id, "–¢–µ—Å—Ç–æ–≤ –ø–æ —Ç–µ–º–∞–º –≤–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π –µ—â–µ –Ω–µ —Ä–µ—à–∞–ª–æ—Å—å üòû"
            )
            return

        for module_id, module_name, themes in stat:
            module_stat_text = f"<b>{module_name}</b>\n"

            for theme_data in themes:
                theme_stat_text = f"„Ö§<i>{theme_data.get('theme_name')}</i>\n"

                for grade in theme_data.get("grades_data"):
                    user = grade.get("user")
                    grade = grade.get("grade")
                    last_name = user.get("last_name")
                    name = user.get("name")
                    login = user.get("login")

                    user_alias = ""
                    if last_name:
                        user_alias += f"{last_name} "
                    if name:
                        user_alias += f"{name} "
                    if login:
                        user_alias += f"({login})"

                    grade_stat_text = f"„Ö§„Ö§{user_alias} - {grade}\n"

                    theme_stat_text += grade_stat_text

                theme_stat_text += "\n"
                module_stat_text += theme_stat_text

            module_stat_text += "\n"
            text_stat += module_stat_text

        bot.send_message(chat_id, text_stat, parse_mode="HTML")

    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        state.set_state(chat_id, "settings")
        bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é:",
            reply_markup=markups.get_teacher_settings_markup(),
        )

    else:
        bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é:",
            reply_markup=markups.get_teacher_main_markup(),
        )


def my_grades(bot, chat_id: int, user_id: int):
    http_client = HttpClient(chat_id)
    grades = http_client.get(f"/users/{user_id}/grades")

    if not grades:
        bot.send_message(chat_id, f"–û—Ü–µ–Ω–æ–∫ –Ω–µ—Ç")

    grades_text = ""

    for module_name, module_data in grades:
        grades_text += f"<b>{module_name}</b>\n"

        for data in module_data:
            theme_name = data.get("name")
            theme_grade = data.get("grade")
            grades_text += f"„Ö§{theme_name} - {theme_grade}\n"

        grades_text += "\n"

    bot.send_message(chat_id, grades_text, parse_mode="HTML")


def admin_main_menu_handler(bot, chat_id: int, user_id: int, text: str):
    if text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        state.set_state(chat_id, "settings")
        bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é:",
            reply_markup=markups.get_teacher_settings_markup(),
        )

    elif text == "üìä –°–≤–æ–¥–∫–∞ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö":
        u_text = "<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n"
        http_client = HttpClient(chat_id)
        users = http_client.get(f"/users")
        for user in users:
            name = user[1]
            last_name = user[2]
            login = user[3]
            created_at = user[7]
            role = user[8]

            user_alias = ""
            if last_name:
                user_alias += f"{last_name} "
            if name:
                user_alias += f"{name} "
            if login:
                user_alias += f"({login})"
            u_text += f"{user_alias} {role}. –°–æ–∑–¥–∞–Ω: {created_at}\n"

        bot.send_message(chat_id, u_text, parse_mode="HTML")

    else:
        bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é:",
            reply_markup=markups.get_admin_main_markup(),
        )


def teacher_settings_menu_handler(bot, chat_id: int, user_id: int, text: str):
    if text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å (—Ç–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è)":
        state.set_state(chat_id, "roles")
        bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ä–æ–ª—å:",
            reply_markup=markups.get_roles_markup(chat_id),
        )

    elif text == "‚öôÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
        state.set_state(chat_id, "edit_module")
        bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –º–æ–¥—É–ª–µ–º:",
            reply_markup=markups.get_edit_module_markup(),
        )

    else:
        bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é:",
            reply_markup=markups.get_teacher_settings_markup(),
        )


def edit_module_menu_handler(bot, chat_id: int, user_id: int, text: str):
    if text == "‚ûï –°–æ–∑–¥–∞—Ç—å –º–æ–¥—É–ª—å":
        state.set_state(chat_id, "create_module")
        bot.send_message(
            chat_id,
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è:",
            reply_markup=markups.remove_markup(),
        )

    elif text == "‚úèÔ∏è –í—ã–±—Ä–∞—Ç—å –º–æ–¥—É–ª—å":
        bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=markups.get_modules_markup(chat_id, user_id),
        )

    else:
        bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –º–æ–¥—É–ª–µ–º:",
            reply_markup=markups.get_edit_module_markup(),
        )


def edit_theme_menu_handler(
    bot, chat_id: int, user_id: int, text: str, module_id: int = None
):
    if text == "‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–µ–º—É":
        module_id = str(state.get_state(chat_id)).split("/")[1]
        state.set_state(chat_id, f"create_theme/{module_id}")
        bot.send_message(
            chat_id,
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã:",
            reply_markup=markups.remove_markup(),
        )

    elif text == "‚úèÔ∏è –í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É":
        module_id = str(state.get_state(chat_id)).split("/")[1]
        mrkp = markups.get_themes_markup(chat_id, module_id)

        isEmpty = not mrkp.to_dict().get("inline_keyboard")
        if not isEmpty:
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=mrkp)
        else:
            bot.send_message(chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–µ–º —É –¥–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è –Ω–µ—Ç.")

    else:
        if module_id:
            state.set_state(chat_id, f"edit_module_child/{module_id}")
        bot.send_message(
            chat_id,
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤–Ω—É—Ç—Ä–∏ –º–æ–¥—É–ª—è:",
            reply_markup=markups.get_edit_theme_markup(),
        )


def edit_exersises_menu_handler(
    bot, chat_id: int, user_id: int, text: str, theme_id: int = None
):
    if text == "‚ûï –°–æ–∑–¥–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ":
        theme_id = str(state.get_state(chat_id)).split("/")[1]
        state.set_state(chat_id, f"create_exersise/{theme_id}")
        create_exersise_handler(bot, chat_id, user_id, text)

    elif text == "‚úèÔ∏è –í—ã–±—Ä–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ":
        theme_id = str(state.get_state(chat_id)).split("/")[1]
        mrkp = markups.get_exersises_markup(theme_id, chat_id)

        isEmpty = not mrkp.to_dict().get("inline_keyboard")
        if not isEmpty:
            bot.send_message(
                chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=mrkp
            )
        else:
            bot.send_message(chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ –¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ –Ω–µ—Ç.")

    else:
        if theme_id:
            state.set_state(chat_id, f"edit_theme_child/{theme_id}")
        bot.send_message(
            chat_id,
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–º—ã:",
            reply_markup=markups.get_edit_exersises_markup(),
        )


def edit_module_handler(bot, chat_id: int, user_id: int, text, module_id: int = None):
    if text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ":
        module_id = str(state.get_state(chat_id)).split("/")[1]
        mess = bot.send_message(
            chat_id,
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è:",
            reply_markup=markups.remove_markup(),
        )
        bot.register_next_step_handler(
            mess,
            lambda message: change_name(
                bot, chat_id, user_id, message.text, "module", module_id
            ),
        )

    elif text == "‚ùå –£–¥–∞–ª–∏—Ç—å":
        module_id = str(state.get_state(chat_id)).split("/")[1]

        http_client = HttpClient(chat_id)
        http_client.delete(f"/modules/{module_id}")

        bot.send_message(
            chat_id, f"–ú–æ–¥—É–ª—å —É–¥–∞–ª–µ–Ω ‚úÖ", reply_markup=markups.get_back_markup()
        )

    elif text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ":
        state.set_state(chat_id, f"edit_module_child/{module_id}")
        edit_theme_menu_handler(bot, chat_id, user_id, None)

    else:
        if module_id:
            state.set_state(chat_id, f"edit_module/{module_id}")

        bot.send_message(
            chat_id,
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –º–æ–¥—É–ª–µ–º:",
            reply_markup=markups.get_edit_object_markup(),
        )


def edit_theme_handler(bot, chat_id: int, user_id: int, text, theme_id: int):
    if text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ":
        theme_id = str(state.get_state(chat_id)).split("/")[1]
        mess = bot.send_message(
            chat_id,
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã:",
            reply_markup=markups.remove_markup(),
        )
        bot.register_next_step_handler(
            mess,
            lambda message: change_name(
                bot, chat_id, user_id, message.text, "theme", theme_id
            ),
        )

    elif text == "‚ùå –£–¥–∞–ª–∏—Ç—å":
        theme_id = str(state.get_state(chat_id)).split("/")[1]

        http_client = HttpClient(chat_id)
        http_client.delete(f"/themes/{theme_id}")

        bot.send_message(
            chat_id, f"–¢–µ–º–∞ —É–¥–∞–ª–µ–Ω–∞ ‚úÖ", reply_markup=markups.get_back_markup()
        )

    elif text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ":
        state.set_state(chat_id, f"edit_theme_child/{theme_id}")
        edit_exersises_menu_handler(bot, chat_id, user_id, text, theme_id)

    else:
        if theme_id:
            module_id = str(state.get_state(chat_id)).split("/")[1]
            state.set_state(chat_id, f"edit_theme/{theme_id}/{module_id}")

        bot.send_message(
            chat_id,
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–µ–º–æ–π:",
            reply_markup=markups.get_edit_object_markup(),
        )


def create_handler(
    bot, chat_id: int, user_id: int, text: str, create_type: str, parent_id: int = None
):
    http_client = HttpClient(chat_id)

    if create_type == "module":
        state.set_state(chat_id, "edit_module")
        langs = markups.get_lang_markup(chat_id, user_id, False)
        if len(langs.keyboard) > 1:

            def save_m(module_name: str, lang_name: str):
                lang_id = lang_answer(lang_name, chat_id)
                module_id = http_client.post(
                    f"/modules", {"name": module_name, "lang_id": lang_id[0]}
                )
                http_client.post(f"/users/{user_id}/modules", {"module_id": module_id})
                bot.send_message(
                    chat_id,
                    f'–ú–æ–¥—É–ª—å "{text}" —Å–æ–∑–¥–∞–Ω ‚úÖ',
                    reply_markup=markups.get_next_markup(),
                )

            msg = bot.send_message(
                chat_id, f"–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è", reply_markup=langs
            )
            bot.register_next_step_handler(msg, lambda msg: save_m(text, msg.text))

        else:
            lang_id = lang_answer(langs.keyboard[0][0].get("text"), chat_id)
            module_id = http_client.post(
                f"/modules", {"name": text, "lang_id": lang_id[0]}
            )
            http_client.post(f"/users/{user_id}/modules", {"module_id": module_id})
            bot.send_message(
                chat_id,
                f'–ú–æ–¥—É–ª—å "{text}" —Å–æ–∑–¥–∞–Ω ‚úÖ',
                reply_markup=markups.get_next_markup(),
            )

    elif create_type == "theme":
        state.set_state(chat_id, f"edit_module/{parent_id}")
        http_client.post(f"/modules/{parent_id}/themes", {"name": text})

        bot.send_message(
            chat_id, f'–¢–µ–º–∞ "{text}" —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ', reply_markup=markups.get_next_markup()
        )


def change_name(bot, chat_id: int, user_id: int, text: str, type: str, id: int):
    http_client = HttpClient(chat_id)

    if type == "module":
        http_client.patch(f"/modules/{id}", {"name": text})
        state.set_state(chat_id, f"edit_module/{id}")
        bot.send_message(
            chat_id,
            f"–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –∏–∑–º–µ–Ω–µ–Ω–æ ‚úÖ",
            reply_markup=markups.get_next_markup(),
        )

    elif type == "theme":
        http_client.patch(f"/themes/{id}", {"name": text})
        state.set_state(chat_id, f"edit_theme/{id}")
        bot.send_message(
            chat_id,
            f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –∏–∑–º–µ–Ω–µ–Ω–æ ‚úÖ",
            reply_markup=markups.get_next_markup(),
        )

    elif type == "exersise":
        http_client.patch(f"/exercises/{id}", {"title": text})
        bot.send_message(
            chat_id,
            f"–ù–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ ‚úÖ",
            reply_markup=markups.get_next_markup(),
        )


def create_exersise_handler(bot, chat_id, user_id: int, text):
    answer = exersise_types_answer(text, chat_id)
    if answer:

        def save_exersise(theme_id: int, title: str):
            http_client = HttpClient(chat_id)
            exersise = http_client.post(
                f"/themes/{theme_id}/exercises", {"title": title, "type_id": answer[0]}
            )
            state.set_state(chat_id, f"edit_theme_child/{theme_id}")
            bot.send_message(chat_id, f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ ‚úÖ")
            edit_exersise_handler(bot, chat_id, user_id, None, exersise[0])

        theme_id = str(state.get_state(chat_id)).split("/")[1]
        mess = bot.send_message(
            chat_id,
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:",
            reply_markup=markups.remove_markup(),
        )
        bot.register_next_step_handler(
            mess, lambda message: save_exersise(theme_id, message.text)
        )

    else:
        bot.send_message(
            chat_id,
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
            reply_markup=markups.get_exersises_types_markup(chat_id),
        )


def edit_exersise_handler(bot, chat_id: int, user_id: int, text, exersise_id: int):
    if text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫":
        mess = bot.send_message(
            chat_id,
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:",
            reply_markup=markups.remove_markup(),
        )
        bot.register_next_step_handler(
            mess,
            lambda message: change_name(
                bot, chat_id, user_id, message.text, "exersise", exersise_id
            ),
        )

    elif text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç":
        change_exersise_content(bot, chat_id, user_id, exersise_id)

    else:
        if exersise_id:
            state.set_state(chat_id, f"{state.get_state(chat_id)}/{exersise_id}")

        bot.send_message(
            chat_id,
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            reply_markup=markups.get_edit_exersise_markup(),
        )


def change_exersise_content(bot, chat_id: int, user_id: int, exersise_id: int):
    http_client = HttpClient(chat_id)
    exersise = http_client.get(f"/exercises/{exersise_id}")
    ExersiseFactory.create_exersise(exersise, bot, chat_id).change()
